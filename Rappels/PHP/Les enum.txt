==

-- Les Enums & les Pure Enums --

Déclaration d'un enum:

<?php

enum Suit
{
    case Hearts;
    case Diamonds;
    case Clubs;
    case Spades;
}
?>

Les valeurs par défaut sont représentées en interne comme des classes, et pas comme des entiers (comme c'est le cas en C).
Toute comparaison liée aux entiers entre ces valeurs que ce soit > ou < donnera donc false.
Dans le cas ou les 'case' d'enums ne sont liées à aucune donnée liée comme les entiers, on les apelle 'Pure Case'.
Un enum qui ne contient que des 'Pure Cases' est un 'Pure Enum'.

==

-- Les Backed Enums -- 

On peut cependant avoir besoin de transmettre nos enums hors de notre programme, ce qui nécessite de les représenter avec des données facilement
serialisable.
On peut associer nos cas d'énumération à des 'scalar' (soit int soit string), on obtient alors des 'Backed Enumeration', exemple:

<?php

enum Suit: string
{
    case Hearts = 'H';
    case Diamonds = 'D';
    case Clubs = 'C';
    case Spades = 'S';
}

print $Suit::Hearts; // Il affiche alors 'H'.

?>

Un cas associé à un équivalent scalaire est appellé 'Backed Case'. Car il est 'Backed' (supporté, tenu, épaulé) par une valeur plus simple.
Un Enum entièrement composé de cas épaulés 'Backed Enum'.

'Backed Enum' = backé par des types de int ou string. Un Enum donné ne supporte qu'un seul type à la fois (pas d'unions de int|string).
Si une Enum est marquée comme ayant un equiv. scalaire, alors tous les cases doivent avoir un equivalent scalaire unique défini explicitement.
Il n'y en a aucun de généra automatiquement (ex: des entiers sequentiels)
Backed case = doit être unique.

Les Backed Enums implémentent une interface interne 'BackedEnum', qui expose les fonctions:
	from(int) ou from(string): Prend un scalaire et retourne le 'Enum case' correspondant. Lance une erreur ValueError si aucun n'est trouvé.
				Utile dans le cas ou le scalaire donné en entré est de confiance & une valeur enum manquante devrait être
				considérée comme erreur fatale, stoppant l'application.
	tryForm(int) ou tryForm(string): Prend un scalaire et retourne le 'Enum case' correspondant. Si aucun trouvé, retourne null.
				Utile quand valeur d'entrée n'est pas de confiance & l'appelant veut implémenter sa propre gestion des erreurs
				ou logique de valeur par défaut.

$scalaire = Suit::Clubs; // Vaut 'C'.
$valEnum = Suit::from($scalaire); // Vaut Suit::Clubs.

==

Enums peuvent contenir méthodes & implem. interfaces.
Si Enum implem. interface, alors tous vérification de type (type check) pour cette interface acceptera les cas de cet Enum.

Exemple:

<?php

interface Colorful
{
    public function color(): string;
}

enum Suit implements Colorful
{
    case Hearts;
    case Diamonds;
    case Clubs;
    case Spades;

    // Fulfills the interface contract.
    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Red',
            Suit::Clubs, Suit::Spades => 'Black',
        };
    }

    // Not part of an interface; that's fine.
    public function shape(): string
    {
        return "Rectangle";
    }
}

function paint(Colorful $c)
{
   /* ... */
}

paint(Suit::Clubs);  // Works

print Suit::Diamonds->shape(); // prints "Rectangle"
?>

Dans un Backed Enum, les déclarations de l'interface vont après la déclaration de type backé.

<?php

interface Colorful
{
    public function color(): string;
}

enum Suit: string implements Colorful
{
    case Hearts = 'H';
    case Diamonds = 'D';
    case Clubs = 'C';
    case Spades = 'S';

    // Fulfills the interface contract.
    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Red',
            Suit::Clubs, Suit::Spades => 'Black',
        };
    }
}
?>

Dans ces contextes, au sein d'une méthode, $this est défini et fait référence à l'instance du Case.

==

-- Méthodes statiques d'Enums --

Enums peuvent avoir méthodes statiques:

<?php

enum Size
{
    case Small;
    case Medium;
    case Large;

    public static function fromLength(int $cm): static
    {
        return match(true) {
            $cm < 50 => static::Small,
            $cm < 100 => static::Medium,
            default => static::Large,
        };
    }
}
?>

Principalement utiles pour mettre en place des constructeurs alternatifs, comme ci-dessus.
L'héritage d'Enums n'est pas permis, donc les méthodes statiques privées comme protégées sont équivalentes.

==

-- Constantes d'Enums --

Enum = peut contenir des constantes

<?php

enum Size
{
    case Small;
    case Medium;
    case Large;

    public const Huge = self::Large;
}
?>

==

-- Enums employant des Traits --

Enums = peuvent s'appuyer sur des Traits, qui se comportent de la même façon que les classes. Précondition = que les traits utilisés dans l'enum ne doivent pas avoir de propriétés, que des méthodes & méthodes statiques.

<?php

interface Colorful
{
    public function color(): string;
}

trait Rectangle
{
    public function shape(): string {
        return "Rectangle";
    }
}

enum Suit implements Colorful
{
    use Rectangle;

    case Hearts;
    case Diamonds;
    case Clubs;
    case Spades;

    public function color(): string
    {
        return match($this) {
            Suit::Hearts, Suit::Diamonds => 'Red',
            Suit::Clubs, Suit::Spades => 'Black',
        };
    }
}
?>

==

-- Les valeurs d'Enums dans des expressions constantes --

Les cases = représentés comme des constantes au sein de l'Enum -> peuvent êtres employés comme valeurs statiques dans la pluspart des expr. constantes: valeurs par défaut de propriétés, valeurs par défaut de variables statiques,
valeurs par défaut de paramètres, valeurs de constantes (globales/de classe).

Les appels implicites de méthodes magiques comme ArrayAccess avec [] ne sont pas permis dans des définitions constantes ou statiques car on ne peux pas garantir que la valeur retournée est déterministe ou que la méthode est sans effets
de bords.
Appels de fonctions, Appels de methodes, accès de propriété = opérations interdites dans des expressions constantes.

==

-- Différences par rapport aux objets --

Enum = construits sur classes & objets, mais ne possèdent pas toutes les fonctionnalités liées aux objets.
Cas d'Enum = ne peuvent pas avoir d'états (interdit).
Pour les enums, sont interdits: les constructeurs & destructeurs, l'héritage, les propriétés statiques ou propriétés objets, le clonage de Enum Cases "cas d'Enums", car ils sont des singletons, les méthodes magiques sauf exception.
Les Enums = doivent tjrs êtres déclarés avant d'être employés.

Fonctionnalités d'objets permises aux Enums:
	- Les méthodes, méthodes statiques, constantes, privées, protégés ou publics;
	- L'implémentation d'un nombre quelconque d'interfaces;
	- Les attributs, sur les Enums ou les cas d'Enums (le filtre de ciblage TARGET_FILTER contient une option pour cibler les Enums, et TARGET_CLASS_CONST les cas d'Enums);
	- Les méthodes magiques __call, __callStatic, __invoke
	- Les constantes __CLASS__ et __FUNCTION__ se comportent normalement
	
La constante magique ::class sur un type Enum s'évalue au nom du type incluant tout namespace, comme pour un objet.
La constante magique ::class sur l'instance d'un Case 'cas d'Enum' s'évalue au type de l'Enum, car elle est une instance de ce type.

Les cas d'Enum ne peuvent pas être instanciés directement avec new, ni avec ReflectionClass::newInstanceWithoutConstructor() en reflection.
Les deux donnent une erreur.

<?php

$clovers = new Suit();
// Error: Cannot instantiate enum Suit

$horseshoes = (new ReflectionClass(Suit::class))->newInstanceWithoutConstructor()
// Error: Cannot instantiate enum Suit
?>


==

-- Lister les valeurs d'un Enum --

Les Enums (aussi bien pures que 'backed') implément une interface interne, UnitEnum. Elle inclue une méthode statique, cases()
Cette méthode retourne un array de tous les cas d'Enum 'Cases' définis, dans l'ordre de déclaration. Exemple:

<?php

Suit::cases();
// Produces: [Suit::Hearts, Suit::Diamonds, Suit::Clubs, Suit::Spades]
?>

==

-- La sérialisation (Serialization) --

Enums = serialisés differement des objets. Ils ont un code de sérialisation spécifique "E" qui spécifie le nom du cas d'Enum.
La routine de deserialisation peut ensuite utiliser ça pour mettre une varaible à la valeur singleton existante.

<?php

Suit::Hearts === unserialize(serialize(Suit::Hearts));

print serialize(Suit::Hearts);
// E:11:"Suit:Hearts";
?>

Permet de faire de sorte à ce que, dès deserialisation, si un enum & case ne peuvent être trouvés matchant la valeur serialisée, un avertissement
est lancé & la valeur false renvoyée.

Si un Pure Enum est serialisé en JSON, une erreur est lancée. Si un Backed Enum est serialisé en JSON, il sera représenté par sa valeur scalaire
seulement, dans le type approprié. Le comportement de deux peut être surchargé en implémentant JsonSerializable.

Pour les Enums, print_r renvoie une sortie pour un cas d'Enum qui sera légèrement différent de celle des objets pour minimiser toute confusion.

<?php

enum Foo {
    case Bar;
}

enum Baz: int {
    case Beep = 5;
}

print_r(Foo::Bar);
print_r(Baz::Beep);

/* Produces

Foo Enum (
    [name] => Bar
)
Baz Enum:int {
    [name] => Beep
    [value] => 5
}
*/
?>

==

-- Pourquoi les Enums ne peuvent pas être étendus (extended) --

Les classes = ont des contrats sur leurs méthodes:

<?php

class A {}
class B extends A {}

function foo(A $a) {}

function bar(B $b) {
    foo($b);
}
?>

Ce code = type-safe, car: B suit le contrat de A, et par la co/contra-variance, tout ce qu'on attend des méthodes est préservé, sauf exceptions.
Enums = ont des contrats sur leurs cas, pas sur leurs méthodes:

<?php

enum ErrorCode {
    case SOMETHING_BROKE;
}

function quux(ErrorCode $errorCode)
{
    // When written, this code appears to cover all cases
    match ($errorCode) {
        ErrorCode::SOMETHING_BROKE => true,
    }
}

?>

On voit par analyse statique que le match ici dans la fonction quux recouvre tous les cas de l'enum ErrorCode.
Mais imaginons qu'on puisse extend les Enums:

<?php

// Thought experiment code where enums are not final.
// Note, this won't actually work in PHP.
enum MoreErrorCode extends ErrorCode {
    case PEBKAC;
}

function fot(MoreErrorCode $errorCode) {
    quux($errorCode);
}

fot(MoreErrorCode::PEBKAC);

?>

Ce ne sera alors plus le cas, et puisque match ne connait pas MoreErrorCode::PEBKAC, le match lancera une exception si il rencontre ce cas.
C'est la raison pour laquelle les enums sont 'final' et ne peuvent pas être étendus 'extended'.



