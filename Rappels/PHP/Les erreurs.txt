PHP rapporte les erreurs en réponse à un nombre de conditions internes d'erreurs. Ces erreurs peuvent être utilisées pour signaler différentes
conditions, et peuvent être affichées et/ou loggées comme voulu.
Toute erreur générée par PHP inclus un type. Il existe une liste des types d'erreurs PHP, avec une description de leurs comportements et causes.

	Liste:

Valeur |    Constante  |    Description

1	E_ERROR (int)	Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.	 
2	E_WARNING (int)	Run-time warnings (non-fatal errors). Execution of the script is not halted.	 
4	E_PARSE (int)	Compile-time parse errors. Parse errors should only be generated by the parser.	 
8	E_NOTICE (int)	Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.	 
16	E_CORE_ERROR (int)	Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP.	 
32	E_CORE_WARNING (int)	Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP.	 
64	E_COMPILE_ERROR (int)	Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.	 
128	E_COMPILE_WARNING (int)	Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine.	 
256	E_USER_ERROR (int)	User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().	 
512	E_USER_WARNING (int)	User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().	 
1024	E_USER_NOTICE (int)	User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().	 
2048	E_STRICT (int)	Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.	 
4096	E_RECOVERABLE_ERROR (int)	Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. 
					If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR.	 
8192	E_DEPRECATED (int)	Run-time notices. Enable this to receive warnings about code that will not work in future versions.	 
16384	E_USER_DEPRECATED (int)	User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error().	 
32767	E_ALL (int)	All errors, warnings, and notices.

==

-- La gestion des erreurs avec PHP --

Si aucun gestionnaire d'erreurs n'est mis en place, alors PHP va les gérer selon sa configuration. 
Quelles erreurs sont raportées et lesquelles ignorées = controllé par la directive php.ini 'error_reporting', ou en exécution 'runtime' par un appel de 'error_reporting()'.
Fortement recommendé de mettre en place la directive de config (car certains erreurs peuvent avoir lieu avant l'exécution du script)

Dans env. de dev => dois tjrs mettre error_reporting à E_ALL, car doit p.voir visualis. les erreurs & y remédier.
En prod => peux mettre à un niv. moins verbose comme E_ALL & ~E_NOTICE & ~E_DEPRECATED (mais souvent E_ALL aussi est approprié)

Ce que PHP fait de ces erreurs => dépend de deux autres directives à configurer:
	- 'display_errors' configure si les erreurs sont affichées dans la sortie du script - doit toujours [!] être désactiv en prod., car peut afficher des données sensibles, comme mdp connexion DB, mais utile en environement de dev.
	- 'log_errors' configure si les erreurs sont loggées, dans un fichier ou syslog, définis par la directive 'error_log'.

==

-- Utiliser des gestionnaires d'erreurs --

Si le gestionnaire d'erreurs par défaut de PHP n'est pas adéquat => peut gérer les erreurs avec notre propre 'error handler' installé avec set_error_handler().

==

-- Les erreurs dans PHP 7 --

PHP 7 change la façon dont la pluspart des erreurs sont gérées. Au lieu de 'report' les erreurs par le mécanisme traditionnel utilisé par PHP 5, la pluspart des erreurs sont maintenant raportées en lançant 'throwing' des exceptions
Error.

Comme avec les exceptions 'normales', ces exceptions 'Error' remontent 'bubble up' à la surface jusqu'à ce qu'elles atteignent un block 'catch'.
Si aucun block, alors le gestionnaire d'exceptions par défaut mis en place via set_exception_handler() est appelé. Si aucun, alors l'exception est convertie en une erreur fatale E_ERROR et gérée à la façon traditionelle.

La hierarchie de Error n'hérite pas de Exception. Donc un catch (Exception $e){ ... } n'attrapera pas les Error. Il faut soit donc un catch (Error $e){ ... }, soit un gestionnaire avec set_exception_handler().

set_exception_handler() gère tout objet Throwable. Error et Exception implementent Throwable.