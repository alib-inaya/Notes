Traits = mécanisme de réutilisation du code
Trait = semblable à une classe (mais peut pas être instanciée et ne sert qu'à grouper & réutiliser des fonctionnalités ensemble), pas possible
	d'instancier un Trait lui même.
Trait = ajout à l'héritage traditionnel permettant la composition horizontale de comportements, c.à.d réutiliser méthodes de classes sans besoin
	d'héritage

Exemple:

<?php
trait ezcReflectionReturnInfo {
    function getReturnType() { /*1*/ }
    function getReturnDescription() { /*2*/ }
}

class ezcReflectionMethod extends ReflectionMethod {
    use ezcReflectionReturnInfo;
    /* ... */
}

class ezcReflectionFunction extends ReflectionFunction {
    use ezcReflectionReturnInfo;
    /* ... */
}
?>

Ici on "colle" le contenu du trait ezcReflectionReturnInfo dans une classe en y ajoutant "use ezcReflectionReturnInfo;"

Ordre de prédécence: 
	Méthodes de la classe courante < méthodes issues du Trait < Méthodes héritées

==

-- Insérer multiple traits --

Une classe peut reçevoir plusieurs traits en même temps en les séparant par une virgule:

<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World';
    }
}

class MyHelloWorld {
    use Hello, World;
    public function sayExclamationMark() {
        echo '!';
    }
}

==

-- Les conflits --

Si deux Traits insèrent méthodes de même noms, erreur fatale levée si conflit pas explicitement résolu.
On peut choisir l'une des méthodes en conflit pour résoudre ce conflit avec l'opérateur insteadof. Mais cela excluera les autres méthodes du
conflit.
On peut donc aussi utiliser l'opérateur as pour inclure une des méthodes conflictuelles, mais sous un autre nom.

Exemple:

<?php
trait A {
    public function smallTalk() {
        echo 'a';
    }
    public function bigTalk() {
        echo 'A';
    }
}

trait B {
    public function smallTalk() {
        echo 'b';
    }
    public function bigTalk() {
        echo 'B';
    }
}

class Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
    }
}

class Aliased_Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
        B::bigTalk as talk;
    }
}
?>

-- Changer la visibilité des méthodes avec as --

Avec l'opérateur as, on peut aussi changer la visibilité des méthodes:

<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

// Modification de la visibilité de la méthode sayHello
class MyClass1 {
    use HelloWorld { sayHello as protected; }
}

// Utilisation d'un alias lors de la modification de la visibilité
// La visibilité de la méthode sayHello n'est pas modifiée
class MyClass2 {
    use HelloWorld { sayHello as private myPrivateHello; }
}
?>

==

-- La composition de traits --

On peut composer des traits avec d'autres traits:

<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World!';
    }
}

trait HelloWorld {
    use Hello, World;
}

class MyHelloWorld {
    use HelloWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
?>

==

-- Méthodes abstraites de traits --

Traits supportent méthodes abstraites pour imposer contraintes aux classes sous-jacentes.
Les méthodes publiques, protégées et privées sont supportées. Avant PHP 8.0.0, seule les méthodes publiques & protégées abstraites l'étaient.

[!]: Dès PHP 8.0.0, la signature d'une méthode concrète doit suivre les règles de compatibilité des signatures. Auparavant sa signature pouvait être différente.

Exemple:

<?php
trait Hello {
    public function sayHelloWorld() {
        echo 'Hello'.$this->getWorld();
    }
    abstract public function getWorld();
}

class MyHelloWorld {
    private $world;
    use Hello;
    public function getWorld() {
        return $this->world;
    }
    public function setWorld($val) {
        $this->world = $val;
    }
}
?>

==

-- Attributs statiques de traits --

Les traits peuvent définir des variables, méthodes et propriété statiques.

[!] Dès PHP 8.1.0, accéder à une méthode ou propriété statique directement sur un trait = obsolète. Doit le faire depuis classe implémentant le trait.

	Exemple avec variable statique:

<?php
trait Counter {
    public function inc() {
        static $c = 0;
        $c = $c + 1;
        echo "$c\n";
    }
}

class C1 {
    use Counter;
}

class C2 {
    use Counter;
}

$o = new C1(); $o->inc(); // echo 1
$p = new C2(); $p->inc(); // echo 1
?>

	Exemple avec méthode statique:

<?php
trait StaticExample {
    public static function doSomething() {
        return 'Doing something';
    }
}

class Example {
    use StaticExample;
}

Example::doSomething();
?>

	Exemple avec propriété statique:

<?php
trait StaticExample {
    public static $static = 'foo';
}

class Example {
    use StaticExample;
}

echo Example::$static;
?>

==

-- Les propriétés de traits --

Traits peuvent def. des propriétés. Exemple:

<?php
trait PropertiesTrait {
    public $x = 1;
}

class PropertiesExample {
    use PropertiesTrait;
}

$example = new PropertiesExample;
$example->x;
?>

Si un trait def. une propriété, alors la classe qui l'utilise ne peut pas en définir une de même nom (sauf si compatible: même visibilité, type, modif. readonly, valeur initiale)

==

-- Les constantes de traits --

Traits peuvent def. des constantes depuis PHP 8.2.0. Exemple:

<?php
trait ConstantsTrait {
    public const FLAG_MUTABLE = 1;
    final public const FLAG_IMMUTABLE = 5;
}

class ConstantsExample {
    use ConstantsTrait;
}

$example = new ConstantsExample;
echo $example::FLAG_MUTABLE; // 1
?>

Si un trait def. une constante, alors la classe ne peut pas def. une constante du même nom sauf si elle est compatible (même visibilité, valeur, ...), sinon erreur fatale.

